import FreeCAD as App, os, re, json
import a2p_importpart
import TechDraw
from PySide2 import QtWidgets

# Stałe szerokości kolumn (synchronizowane z 19_CREATE_DRAWINGS_MAIN)
DEFAULT_COLUMN_WIDTH = 125   # szerokość kolumny w arkuszu (px)
POSITION_COLUMN_WIDTH = 33   # szerokość kolumny używana do pozycjonowania tabeli (mm)

# --- Logger ---
def log(msg):
    App.Console.PrintMessage(str(msg) + "\n")

# --- Helper: ustaw szerokości kolumn w arkuszu Spreadsheet ---
def apply_fixed_column_widths_to_sheet(sheet, width_px, cell_start="A1", cell_end="I999"):
    try:
        width_px = int(width_px)
    except Exception:
        width_px = 100
    try:
        start_col = re.match(r"([A-Z]+)", cell_start).group(1)
        end_col   = re.match(r"([A-Z]+)", cell_end).group(1)
    except Exception:
        start_col, end_col = "A", "I"
    for c_ord in range(ord(start_col), ord(end_col) + 1):
        col_letter = chr(c_ord)
        try:
            sheet.setColumnWidth(col_letter, width_px)
        except Exception:
            try:
                if hasattr(sheet, "setColumnWidthInPixels"):
                    sheet.setColumnWidthInPixels(col_letter, width_px)
            except Exception:
                pass

def get_project_dir():
    if App.ActiveDocument and getattr(App.ActiveDocument, "FileName", ""):
        return os.path.dirname(App.ActiveDocument.FileName)
    raise Exception("Zapisz i otwórz dokument projektu zanim uruchomisz makro.")

def list_templates():
    tpl_dir = os.path.join(App.getResourceDir(), "Mod", "TechDraw", "Templates")
    if not os.path.isdir(tpl_dir):
        log(f"!!! Nie znaleziono katalogu Templates: {tpl_dir}")
        return []
    return [f for f in os.listdir(tpl_dir) if f.lower().endswith("svg")]

def select_template_and_scale():
    files = list_templates()
    if not files:
        return None, None
    dlg = QtWidgets.QDialog()
    dlg.setWindowTitle("Ustawienia rysunku TechDraw")
    layout = QtWidgets.QVBoxLayout(dlg)
    scale_layout = QtWidgets.QHBoxLayout()
    scale_label = QtWidgets.QLabel("Skala:")
    scale_combo = QtWidgets.QComboBox()
    scale_combo.addItems(["1:1", "1:10", "1:50", "1:100", "1:200"])
    scale_layout.addWidget(scale_label)
    scale_layout.addWidget(scale_combo)
    layout.addLayout(scale_layout)
    tpl_label = QtWidgets.QLabel("Szablon:")
    tpl_combo = QtWidgets.QComboBox()
    tpl_combo.addItems(files)
    layout.addWidget(tpl_label)
    layout.addWidget(tpl_combo)
    btn_ok = QtWidgets.QPushButton("OK")
    layout.addWidget(btn_ok)
    btn_ok.clicked.connect(dlg.accept)
    dlg.exec_()
    return tpl_combo.currentText(), scale_combo.currentText()

# --- material/density dialogs ---
apply_to_all_mat = False
global_material = "S355J2"
apply_to_all_dens = False
global_density = 7850.0

def ask_material(element_label, default="S355J2"):
    global apply_to_all_mat, global_material
    if apply_to_all_mat:
        return global_material
    dlg = QtWidgets.QDialog()
    dlg.setWindowTitle("Gatunek stali")
    layout = QtWidgets.QVBoxLayout(dlg)
    lbl_elem = QtWidgets.QLabel(f"Element: {element_label}")
    lbl_elem.setStyleSheet("font-weight: bold;")
    layout.addWidget(lbl_elem)
    form_layout = QtWidgets.QHBoxLayout()
    label = QtWidgets.QLabel("Gatunek stali:")
    textbox = QtWidgets.QLineEdit()
    textbox.setText(default)
    form_layout.addWidget(label)
    form_layout.addWidget(textbox)
    layout.addLayout(form_layout)
    cb = QtWidgets.QCheckBox("Zastosuj do wszystkich pozycji")
    layout.addWidget(cb)
    box = QtWidgets.QDialogButtonBox(QtWidgets.QDialogButtonBox.Ok)
    layout.addWidget(box)
    box.accepted.connect(dlg.accept)
    if dlg.exec_() == QtWidgets.QDialog.Accepted:
        m = textbox.text().strip() or default
        if cb.isChecked():
            apply_to_all_mat = True
            global_material = m
        return m
    return default

def ask_density(element_label, default=7850.0):
    global apply_to_all_dens, global_density
    if apply_to_all_dens:
        return global_density
    dlg = QtWidgets.QDialog()
    dlg.setWindowTitle("Gęstość stali")
    layout = QtWidgets.QVBoxLayout(dlg)
    lbl_elem = QtWidgets.QLabel(f"Element: {element_label}")
    lbl_elem.setStyleSheet("font-weight: bold;")
    layout.addWidget(lbl_elem)
    form_layout = QtWidgets.QHBoxLayout()
    label = QtWidgets.QLabel("Gęstość stali:")
    textbox = QtWidgets.QLineEdit()
    textbox.setText(str(default))
    unit = QtWidgets.QLabel("kg/m³")
    form_layout.addWidget(label)
    form_layout.addWidget(textbox)
    form_layout.addWidget(unit)
    layout.addLayout(form_layout)
    cb = QtWidgets.QCheckBox("Zastosuj do wszystkich pozycji")
    layout.addWidget(cb)
    box = QtWidgets.QDialogButtonBox(QtWidgets.QDialogButtonBox.Ok)
    layout.addWidget(box)
    box.accepted.connect(dlg.accept)
    if dlg.exec_() == QtWidgets.QDialog.Accepted:
        try:
            d = float(textbox.text().strip())
        except Exception:
            d = default
        if cb.isChecked():
            apply_to_all_dens = True
            global_density = d
        return d
    return default

# --- helpers ---
def _get_dims_from_bbox(obj):
    try:
        if not hasattr(obj, "Shape") or obj.Shape is None or obj.Shape.isNull():
            return (0.0,0.0,0.0)
        bb = obj.Shape.BoundBox
        dims = [bb.XLength, bb.YLength, bb.ZLength]
        dims.sort(reverse=True)
        return dims[0], dims[1], dims[2]
    except Exception:
        return (0.0,0.0,0.0)

def collect_single_data_from_main(main_doc, single_dir, main_dir):
    re_ew     = re.compile(r"^(\d{3})_")
    re_single = re.compile(r"^(\d{4})_")
    single_data = {}
    for o in main_doc.Objects:
        m = re_single.match(o.Label or "")
        if not m: continue
        pref = m.group(1)
        sd = single_data.setdefault(pref, {"ilosc":0,"dlugosc":0.0,"szer":0.0,"wys":0.0,"nazwa":"?","ews": set()})
        sd["ilosc"] += 1
    for o in main_doc.Objects:
        m = re_ew.match(o.Label or "")
        if not m: continue
        pref_ew = m.group(1)
        fcstd_path = os.path.join(main_dir, f"{pref_ew}.FCStd")
        if not os.path.isfile(fcstd_path): continue
        try:
            td = App.openDocument(fcstd_path)
        except Exception:
            continue
        try:
            for p in td.Objects:
                m2 = re_single.match(p.Label or "")
                if not m2: continue
                pref_single = m2.group(1)
                sd = single_data.setdefault(pref_single, {"ilosc":0,"dlugosc":0.0,"szer":0.0,"wys":0.0,"nazwa":"?","ews": set()})
                sd["ilosc"] += 1
                sd["ews"].add(pref_ew)
        finally:
            try: App.closeDocument(td.Name)
            except Exception: pass
    for pref, data in single_data.items():
        fcstd_path = os.path.join(single_dir, f"{pref}.FCStd")
        if not os.path.isfile(fcstd_path): continue
        try:
            td = App.openDocument(fcstd_path)
        except Exception:
            continue
        try:
            for o in td.Objects:
                if hasattr(o, "Shape") and o.Shape and not o.Shape.isNull():
                    L,W,H = _get_dims_from_bbox(o)
                    data["dlugosc"] = max(data["dlugosc"], L)
                    data["szer"]    = max(data["szer"], W)
                    data["wys"]     = max(data["wys"], H)
                    if data["nazwa"] == "?":
                        if o.Label and o.Label.lower() != "line":
                            data["nazwa"] = o.Label
        finally:
            try: App.closeDocument(td.Name)
            except Exception: pass
    for k,v in single_data.items():
        if isinstance(v.get("ews"), set):
            v["ews"] = sorted(list(v["ews"]))
    return single_data

def create_single_assembly_and_open(docname, single_dir, draw_dir):
    doc = App.newDocument(docname)
    App.setActiveDocument(doc.Name)
    App.ActiveDocument = doc
    doc_path = os.path.join(draw_dir, f"{docname}.FCStd")
    try:
        doc.saveAs(doc_path)
    except Exception:
        pass
    files = []
    if os.path.isdir(single_dir):
        files = [f for f in os.listdir(single_dir) if f.lower().endswith("fcstd")]
    if not files:
        log(f"!!! Brak plików w katalogu: {single_dir}")
        return doc
    offset = 0
    for f in files:
        filepath = os.path.join(single_dir, f)
        try:
            root = a2p_importpart.importPartFromFile(doc, filepath)
            if root:
                root.Placement.Base.x = offset
                log(f">>> Zaimportowano {f} na X={offset}")
                offset += 30000
        except Exception as e:
            log(f"!!! Błąd importu {f}: {e}")
    try:
        doc.recompute()
        doc.save()
    except Exception:
        pass
    log(f">>> Utworzono {docname} z {len(files)} plików")
    return doc

def choose_main_document(draw_dir, main_dir):
    ad = App.ActiveDocument
    re_ew = re.compile(r"^(\d{3})_")
    re_single = re.compile(r"^(\d{4})_")
    def looks_like_main(doc):
        if not doc: return False
        try:
            fn = getattr(doc, "FileName", "") or ""
            if fn:
                if os.path.sep + "MAIN" + os.path.sep in fn.upper() or "MAIN" in os.path.basename(fn).upper():
                    return True
            for o in doc.Objects:
                if re_ew.match(o.Label or "") or re_single.match(o.Label or ""):
                    return True
        except Exception:
            return False
        return False
    if looks_like_main(ad):
        log(f"[INFO] Używam aktywnego dokumentu jako MAIN: {ad.Name}")
        return ad
    candidate = os.path.join(draw_dir, "MAIN_ASSEMBLY.FCStd")
    if os.path.isfile(candidate):
        try:
            md = App.openDocument(candidate)
            log(f"[INFO] Otwieram MAIN_ASSEMBLY z DRAWINGS: {candidate}")
            return md
        except Exception:
            pass
    candidate2 = os.path.join(main_dir, "MAIN_ASSEMBLY.FCStd")
    if os.path.isfile(candidate2):
        try:
            md = App.openDocument(candidate2)
            log(f"[INFO] Otwieram MAIN_ASSEMBLY z MAIN: {candidate2}")
            return md
        except Exception:
            pass
    if os.path.isdir(main_dir):
        for fname in os.listdir(main_dir):
            if fname.lower().endswith("fcstd"):
                fp = os.path.join(main_dir, fname)
                try:
                    md = App.openDocument(fp)
                    log(f"[INFO] Otwieram pierwszy .FCStd z MAIN_DIR: {fp}")
                    return md
                except Exception:
                    continue
    return None

def set_view_position_via_viewobject(view, x, y):
    try:
        vo = view.ViewObject
        if hasattr(vo, "X") and hasattr(vo, "Y"):
            vo.X = float(x)
            vo.Y = float(y)
            try:
                vo.update()
            except Exception:
                pass
            return True
    except Exception:
        pass
    try:
        view.X = float(x)
        view.Y = float(y)
        return True
    except Exception:
        try:
            view.X = x
            view.Y = y
            return True
        except Exception:
            return False

# --- Główna funkcja tworząca stronę, widoki i tabelę ---
def create_single_overview_grid_centered_with_table(main_doc, single_doc, template_name, scale_str, single_data):
    tpl_dir = os.path.join(App.getResourceDir(), "Mod", "TechDraw", "Templates")
    tpl_path = os.path.join(tpl_dir, template_name)
    if not os.path.isfile(tpl_path):
        log(f"!!! Nie znaleziono szablonu: {tpl_path}")
        return
    try:
        num, den = scale_str.split(":")
        scale_val = float(num) / float(den)
    except Exception:
        scale_val = 1.0

    template_obj = single_doc.addObject('TechDraw::DrawSVGTemplate', "Template_SingleOverview")
    template_obj.Template = tpl_path
    page = single_doc.addObject('TechDraw::DrawPage', "Page_SingleOverview")
    page.Template = template_obj

    # grid params
    max_dim = 3000.0
    margin  = 30.0
    view_size = max_dim * scale_val
    offset_x = view_size + margin
    offset_y = view_size/2 + margin

    # template dims
    try:
        pw = float(template_obj.Width)
        ph = float(template_obj.Height)
    except Exception:
        pw = 210.0; ph = 297.0

    usable_w = pw - 2*margin
    cols_fit = max(1, int(usable_w // offset_x))
    if cols_fit < 1: cols_fit = 1

    log(f"[GRID] page W={pw} H={ph} scale={scale_val} view_size={view_size} cols={cols_fit}")

    created = []
    created_prefs = []
    idx = 0
    for pref in sorted(single_data.keys()):
        src = None
        for o in single_doc.Objects:
            try:
                if (o.Label or "").startswith(pref):
                    src = o; break
            except Exception:
                continue
        if not src:
            for o in single_doc.Objects:
                try:
                    if pref in (o.Label or ""):
                        src = o; break
                except Exception:
                    continue
        if not src:
            log(f"[WARN] Nie znaleziono obiektu SINGLE dla {pref} w SINGLE_ASSEMBLY; pomijam")
            idx += 1
            continue

        col = idx % cols_fit
        row = idx // cols_fit

        gx = col * offset_x + view_size / 2.0
        gy = -(row * offset_y + view_size / 2.0)  # stack downward

        view = single_doc.addObject('TechDraw::DrawViewPart', f"ViewXZ_{pref}")
        view.Source = [src]
        view.Direction = (0,1,0)
        view.ScaleType = "Custom"
        view.Scale = scale_val

        page.addView(view)

        # set temp grid coords
        try:
            view.X = float(gx)
            view.Y = float(gy)
        except Exception:
            set_view_position_via_viewobject(view, gx, gy)

        try: view.recompute()
        except Exception: pass

        created.append(view)
        created_prefs.append(pref)
        log(f">>> Stworzono ViewXZ_{pref} grid col={col} row={row} gx={gx:.2f} gy={gy:.2f}")
        idx += 1

    # center group
    if created:
        xs=[]; ys=[]
        for v in created:
            try:
                x = float(getattr(v, "X", getattr(v.ViewObject, "X", 0.0)))
                y = float(getattr(v, "Y", getattr(v.ViewObject, "Y", 0.0)))
                xs.append(x); ys.append(y)
            except Exception:
                continue
        if xs and ys:
            min_x = min(xs) - view_size/2.0
            max_x = max(xs) + view_size/2.0
            min_y = min(ys) - view_size/2.0
            max_y = max(ys) + view_size/2.0
            group_center_x = (min_x + max_x) / 2.0
            group_center_y = (min_y + max_y) / 2.0

            page_center_x = pw / 2.0
            page_center_y = ph / 2.0

            dx = page_center_x - group_center_x
            dy = page_center_y - group_center_y

            log(f"[CENTER] group cx={group_center_x:.2f} cy={group_center_y:.2f} -> page cx={page_center_x:.2f} cy={page_center_y:.2f} dx={dx:.2f} dy={dy:.2f}")

            for v in created:
                try:
                    vx = float(getattr(v, "X", getattr(v.ViewObject, "X", 0.0)))
                    vy = float(getattr(v, "Y", getattr(v.ViewObject, "Y", 0.0)))
                    newx = vx + dx
                    newy = vy + dy
                    if hasattr(v, "ViewObject") and hasattr(v.ViewObject, "X"):
                        v.ViewObject.X = float(newx)
                        v.ViewObject.Y = float(newy)
                    else:
                        v.X = float(newx)
                        v.Y = float(newy)
                except Exception:
                    try:
                        set_view_position_via_viewobject(v, vx+dx, vy+dy)
                    except Exception:
                        pass

    # --- create spreadsheet and table ---
    try:
        sheet_name = "BOM_SingleOverview"
        if sheet_name in single_doc.Objects:
            sheet = single_doc.getObject(sheet_name)
            try:
                max_rows = 500
                cols = ['A','B','C','D','E','F','G','H','I']
                for r in range(1, max_rows+1):
                    for c in cols:
                        try: sheet.set(f"{c}{r}", "")
                        except Exception: pass
            except Exception:
                try: sheet.clearAll()
                except Exception: pass
        else:
            sheet = single_doc.addObject("Spreadsheet::Sheet", sheet_name)

        # headers A1..I2
        try:
            sheet.set("A1", "LIST OF SINGLE ELEMENTS")
            sheet.set("A2","ITEM")
            sheet.set("B2","NAME")
            sheet.set("C2","QUANTITY (pcs.)")
            sheet.set("D2","LENGHT [mm]")
            sheet.set("E2","WIDTH [mm]")
            sheet.set("F2","HEIGHT [mm]")
            sheet.set("G2","MATERIAL")
            sheet.set("H2","WEIGHT OF 1 pcs. [kg]")
            sheet.set("I2","WEIGHT [kg]")
        except Exception:
            pass

        # try to merge A1:I1 (several API variants)
        try:
            try:
                sheet.mergeCells("A1:I1")
            except Exception:
                if hasattr(sheet, "mergeRange"):
                    sheet.mergeRange("A1", "I1")
                elif hasattr(sheet, "setMergedCells"):
                    sheet.setMergedCells(["A1:I1"])
        except Exception as e:
            log(f"[DEBUG] merge header failed: {e}")

        row = 3
        total_weight = 0.0
        for pref in sorted(created_prefs):
            data = single_data.get(pref, {})
            element_label = pref
            material = ask_material(element_label, "S355J2")
            density = ask_density(element_label, 7850.0)
            vol_m3 = (data.get("dlugosc",0.0) * data.get("szer",0.0) * data.get("wys",0.0)) / 1e9
            waga_elem = vol_m3 * density
            waga_total = waga_elem * data.get("ilosc",0)

            try:
                sheet.set(f"A{row}", pref)
                sheet.set(f"B{row}", data.get("nazwa","?"))
                sheet.set(f"C{row}", str(data.get("ilosc",0)))
                sheet.set(f"D{row}", f"{data.get('dlugosc',0.0):.2f}")
                sheet.set(f"E{row}", f"{data.get('szer',0.0):.2f}")
                sheet.set(f"F{row}", f"{data.get('wys',0.0):.2f}")
                sheet.set(f"G{row}", material)
                sheet.set(f"H{row}", f"{waga_elem:.3f}")
                sheet.set(f"I{row}", f"{waga_total:.3f}")
            except Exception as e:
                log(f"[DEBUG] Błąd przy wstawianiu wiersza {row} do {sheet_name}: {e}")

            total_weight += waga_total
            row += 1

        # summary
        try:
            sheet.set(f"H{row}", "TOTAL WEIGHT [kg]")
            sheet.set(f"I{row}", f"{total_weight:.3f}")
        except Exception:
            pass

        try: single_doc.recompute()
        except Exception: pass

        # determine last row with data (we will include summary row in table range)
        last_row = 2
        try:
            r = 3
            while True:
                val = sheet.get(f"A{r}")
                if val is None or str(val).strip() == "":
                    break
                last_row = r
                r += 1
        except Exception:
            pass

        # include summary row -> cell_end = I{last_row + 1}
        cell_start = "A1"
        cell_end = f"I{last_row + 1}"

        # --- Ustaw szerokości kolumn na arkuszu PRZED dodaniem widoku tabeli ---
        try:
            apply_fixed_column_widths_to_sheet(sheet, DEFAULT_COLUMN_WIDTH, cell_start, cell_end)
            try: single_doc.recompute()
            except Exception: pass
        except Exception:
            pass

        table_view = single_doc.addObject("TechDraw::DrawViewSpreadsheet", "Table_SingleOverview")
        table_view.Source = sheet
        try:
            table_view.CellStart = cell_start
            table_view.CellEnd = cell_end
        except Exception:
            try:
                vo = table_view.ViewObject
                if hasattr(vo, "CellStart"): vo.CellStart = cell_start
                if hasattr(vo, "CellEnd"): vo.CellEnd = cell_end
            except Exception:
                pass

        try:
            vo = table_view.ViewObject
            if hasattr(vo, "FontSize"): vo.FontSize = 10
            if hasattr(vo, "RowHeight"): vo.RowHeight = 6
            vo.Visibility = True
        except Exception:
            pass

        # initial size (will be overridden by computed size)
        try:
            table_view.Width = 160.0
            table_view.Height = 90.0
        except Exception:
            pass

        page.addView(table_view)

        try: table_view.recompute()
        except Exception: pass
        try: single_doc.recompute()
        except Exception: pass

        # compute table size based on filled cells (ensure we used last_row+1 above)
        def sheet_filled_size(sheet):
            max_col = 0; max_row = 0
            cols = [chr(c) for c in range(ord('A'), ord('Z')+1)]
            for c_idx, c in enumerate(cols, start=1):
                found_in_col = False
                for r in range(1, 2000):
                    try:
                        val = sheet.get(f"{c}{r}")
                    except Exception:
                        val = None
                    if val is not None and str(val).strip() != "":
                        found_in_col = True
                        if r > max_row: max_row = r
                if found_in_col: max_col = c_idx
            if max_col == 0 and max_row == 0: return 1,1
            if max_row < 2: max_row = 2
            return max_row, max_col

        filled_rows, filled_cols = sheet_filled_size(sheet)
        if filled_rows < (last_row + 1):
            filled_rows = last_row + 1

        row_height_mm = 6.0; col_width_mm = POSITION_COLUMN_WIDTH
        table_h_mm = filled_rows * row_height_mm
        table_w_mm = filled_cols * col_width_mm
        margin_base = 30.0; safe_offset = 2.0

        # LEFT-BOTTOM placement center (values to store)
        left_margin = margin_base
        bottom_margin = margin_base
        center_x = left_margin + safe_offset + (table_w_mm / 2.0)
        center_y = bottom_margin + safe_offset + (table_h_mm / 2.0)

        pos_x = float(center_x)
        pos_y = float(center_y)

        try:
            vo = table_view.ViewObject
        except Exception:
            vo = None

        if vo is not None:
            try:
                if hasattr(vo, "X"): vo.X = pos_x
                if hasattr(vo, "Y"): vo.Y = pos_y
                try: vo.update()
                except Exception: pass
            except Exception:
                pass

        try:
            table_view.X = pos_x
            table_view.Y = pos_y
        except Exception:
            pass

        try:
            pl = getattr(table_view, "Placement", None)
            if pl is not None:
                try:
                    pl.Base.x = pos_x
                    pl.Base.y = pos_y
                    table_view.Placement = pl
                except Exception:
                    try:
                        table_view.Placement = App.Placement(App.Vector(pos_x, pos_y, 0), App.Rotation())
                    except Exception:
                        pass
        except Exception:
            pass

        try:
            table_view.Width = table_w_mm
            table_view.Height = table_h_mm
        except Exception:
            pass

        try: table_view.recompute()
        except Exception: pass
        try: single_doc.recompute()
        except Exception: pass

        # verification log
        stored_x = stored_y = None
        try:
            vo2 = table_view.ViewObject
            if hasattr(vo2, "X"): stored_x = float(vo2.X)
            if hasattr(vo2, "Y"): stored_y = float(vo2.Y)
        except Exception:
            pass
        if stored_x is None or stored_y is None:
            try:
                pl2 = getattr(table_view, "Placement", None)
                if pl2 is not None:
                    stored_x = float(pl2.Base.x); stored_y = float(pl2.Base.y)
            except Exception:
                pass
        if stored_x is None or stored_y is None:
            try:
                stored_x = float(getattr(table_view, "X", None))
                stored_y = float(getattr(table_view, "Y", None))
            except Exception:
                pass

        log(f"[TABLE] Dodano tabelę {sheet.Name} zakres={cell_start}:{cell_end} pos(desired)={pos_x:.2f},{pos_y:.2f} stored={stored_x},{stored_y} size={table_w_mm:.2f}x{table_h_mm:.2f} filled_r={filled_rows} filled_c={filled_cols}")

    except Exception as e:
        log(f"[TABLE] Błąd podczas tworzenia/pozycjonowania tabeli: {e}")

    try:
        single_doc.recompute()
        single_doc.save()
    except Exception:
        pass

    log(">>> Gotowe: Single overview (grupa wyśrodkowana) z tabelą utworzona.")

# ENTRYPOINT
try:
    proj_dir = get_project_dir()
    single_dir = os.path.join(proj_dir, "SINGLE")
    main_dir   = os.path.join(proj_dir, "MAIN")
    draw_dir   = os.path.join(proj_dir, "DRAWINGS")
    os.makedirs(draw_dir, exist_ok=True)

    log("=== START CREATE_DRAWINGS_SINGLE (with table) ===")

    main_doc = choose_main_document(draw_dir, main_dir)
    if not main_doc:
        raise Exception("Nie udało się odnaleźć lub otworzyć dokumentu MAIN. Upewnij się, że aktywny dokument to MAIN lub że istnieje MAIN_ASSEMBLY.FCStd lub inne .FCStd w katalogu MAIN.")

    single_data = collect_single_data_from_main(main_doc, single_dir, main_dir)
    if not single_data:
        log("Brak wykrytych elementów pojedynczych w MAIN. Kończę.")
        raise SystemExit

    single_doc = create_single_assembly_and_open("SINGLE_ASSEMBLY", single_dir, draw_dir)

    tpl, scale = select_template_and_scale()
    if not tpl or not scale:
        log("Nie wybrano szablonu lub skali. Anuluję.")
        raise SystemExit

    create_single_overview_grid_centered_with_table(main_doc, single_doc, tpl, scale, single_data)

    log("=== KONIEC CREATE_DRAWINGS_SINGLE (with table) ===")

except Exception as e:
    log(f"!!! FAIL: {e}")
